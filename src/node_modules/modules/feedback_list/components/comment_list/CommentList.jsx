import React from 'react'
import { useState, useRef, useEffect } from 'react'
import { useDispatch, useSelector } from "react-redux";

import Comment from 'components/comment/Comment'
import classes from './CommentList.module.css'
import Textarea from 'UI/textarea/Textarea'
import Button from 'UI/button/Button'
import Loader from 'UI/loader/Loader'
import {getAddCommentAction,
        getLoadCommentAction,
} from 'modules/feedback_list/store/actionCreator'
import {getAddAlertAction} from 'modules/alert'

export default function CommentList(props) {
    const [isCommentVisible, setIsCommentVisible] = useState(true)
    const [isCommentCreateVisible, setIsCommentCreateVisible] = useState(false)
    const commentCreateRef = useRef()
    const dispatch = useDispatch()
    const commentState = useSelector(state => state.comment)
    const isLoadComments = useSelector(state => state.load.loading)

    useEffect(() => {
        dispatch(getLoadCommentAction())
    }, [])

    const createComment = () => {
        if (!commentCreateRef.current.value)
            return dispatch(getAddAlertAction('error', 'Необходимо ввести текст комментария'))

        dispatch(getAddCommentAction({
            userName: 'Данила',
            userImageUrl: process.env.PUBLIC_URL + 'user.jpg',
            createDate: Date.now(),
            commentText: commentCreateRef.current.value,
        }))
        commentCreateRef.current.value = ''
    }

    return (
        <div className={classes.commentlist_wrapper}>
            <span className={classes.commentlist_button} onClick={() => {setIsCommentVisible(false); setIsCommentCreateVisible(true)}}>Комментировать</span>
            {
                isCommentVisible ?
                    <span className={classes.commentlist_hidebutton} onClick={() => {setIsCommentVisible(false); setIsCommentCreateVisible(false) }}>Скрыть комментарии ({commentState.length})</span>
                    :
                    <span className={classes.commentlist_hidebutton} onClick={() => setIsCommentVisible(true)}>Показать комментарии ({commentState.length})</span>
            }
            {
                isLoadComments ?
                    <Loader />
                    : <></>
            }

            {
                isCommentVisible  ?
                    <div className={classes.commentlist_comments}>
                        {
                            commentState.map(comment =>
                                <Comment userName={comment.userName} createDate={comment.createDate} userImageUrl={comment.userImageUrl} commentText={comment.commentText} />
                            )
                        }
                    </div>
                    :
                    isCommentCreateVisible ?
                        <>
                            <Textarea ref={commentCreateRef} placeholder="Текст комментария" rows='5' />
                            <Button
                                text='Отправить комментарий'
                                wrapperStyle={{display: 'flex', justifyContent: 'right'}}
                                onClick={createComment}
                            />

                        </>

                        :
                        <></>

            }
        </div>
    )
}

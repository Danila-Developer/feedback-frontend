import React, {useEffect, useState} from 'react';
import classes from 'components/singe_image_upload/SingleImageUpload.module.css';
import {useDispatch} from "react-redux";
import {getAddAlertAction} from 'modules/alert'

const FileUpload = ({isDrugOver, dropHandler, changeInputHandler}) => {
    return (
        <div
            className={isDrugOver ? [classes.wrapper, classes.over].join(' ') : classes.wrapper}
            onDrop={dropHandler}
        >
            <div className={classes.inputWithImage}>
                <img src={process.env.PUBLIC_URL + 'img/no-photo.svg'} className={classes.inputImage}/>
                <label htmlFor={classes.inputFile} className={classes.inputFileLabel}>Выберите фото</label>
                <input
                    type="file"
                    id={classes.inputFile}
                    className={classes.inputFile}
                    onChange={changeInputHandler}
                    accept='.jpg, .jpeg, .png, .svg, .webp'
                />
            </div>
            <div className={classes.orDrug}>или перетащите сюда</div>
        </div>
    )
}

const SingleImageUpload = ({setUploadedFile}) => {
    const [decodedFile, setDecodedFile] = useState('')
    const [isDrugOver, setIsDrugOver] = useState(false)

    const dispatch = useDispatch()

    const decodeFile = file => {
        if (file.type.split('/')[0] === 'image') {
            setUploadedFile(file)
            const reader = new FileReader()
            reader.onload = e => {
                setDecodedFile(e.target.result)
            }
            reader.readAsDataURL(file)
        } else {
            dispatch(getAddAlertAction('error', 'Загружаемый файл должен быть картинкой'))
        }
    }

    const dropHandler = async e => {
        e.preventDefault()
        const file = e.dataTransfer.files[0]
        decodeFile(file)
        setIsDrugOver(false)
    }

    const changeInputHandler = e => {
        const file = e.target.files[0]
        decodeFile(file)
    }

    useEffect(() => {
        document.addEventListener('dragover', e => {
            e.preventDefault()
            setIsDrugOver(true)
        })
        document.addEventListener('dragleave', e => {
            e.preventDefault()
            setIsDrugOver(false)
        })
        document.addEventListener('drop', e => {
            e.preventDefault()
            setIsDrugOver(false)
        })
    }, [])

    return (
        <div>
            {
                decodedFile
                ?
                    <img src={decodedFile} alt="" className={classes.decodedImage} />
                :
                    <FileUpload dropHandler={dropHandler} isDrugOver={isDrugOver} changeInputHandler={changeInputHandler} />
            }
        </div>
    )
};

export default SingleImageUpload;
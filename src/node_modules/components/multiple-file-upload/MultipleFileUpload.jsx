import React, {useEffect, useState} from 'react';
import uuid from 'react-uuid'

import classes from 'components/multiple-file-upload/MultipleFileUpload.module.css';
import {useDispatch} from "react-redux";
import {getAddAlertAction} from 'modules/alert'

function getReadableFileSizeString(fileSizeInBytes) {
    let i = -1;
    let byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];
    do {
        fileSizeInBytes /= 1024;
        i++;
    } while (fileSizeInBytes > 1024);

    return Math.max(fileSizeInBytes, 0.1).toFixed(1) + byteUnits[i];
}

const FileUpload = ({isDrugOver, dropHandler, changeInputHandler}) => {
    return (
        <div
            className={isDrugOver ? [classes.wrapper, classes.over].join(' ') : classes.wrapper}
            onDrop={dropHandler}
        >
            <div className={classes.inputWithImage}>
                <img src={process.env.PUBLIC_URL + 'img/no-photo.svg'} className={classes.inputImage}/>
                <label htmlFor={classes.inputFile} className={classes.inputFileLabel}>Выберите файлы</label>
                <input
                    type="file"
                    multiple={true}
                    id={classes.inputFile}
                    className={classes.inputFile}
                    onChange={changeInputHandler}
                    //accept='.jpg, .jpeg, .png, .svg, .webp'
                />
            </div>
            <div className={classes.orDrug}>или перетащите сюда</div>
        </div>
    )
}

const ViewFile = ({name, size, type, dataUrl, onCloseHandle}) => {
    return (
        <div className={classes.viewFile}>
            <img src={dataUrl}
                 className={classes.viewFileImage}
            />
            <div className={classes.viewFileInfo}>
                <div className={classes.viewFileInfoType}>.{type}</div>
                <div className={classes.viewFileInfoName}>{name}</div>
            </div>
            <div className={classes.viewFileHover}>
                <img
                    onClick={onCloseHandle}
                    src={process.env.PUBLIC_URL + 'close.svg'}
                    className={classes.viewFileHoverClose}
                />
                <div className={classes.viewFileHoverSize}>{size}</div>
                <div className={classes.viewFileHoverType}>.{type}</div>
                <div className={classes.viewFileHoverName}>{name}</div>
            </div>
        </div>
    )
}


const ViewFiles = ({decodedFiles, setDecodedFiles, setUploadedFiles, uploadedFiles, decodeFiles}) => {
    const removeFileHandler = id => {
        setDecodedFiles(decodedFiles.filter(file => file.id !== id))
        setUploadedFiles(uploadedFiles.filter(file => file.id !== id))
    }

    return (
        <div>
            <label htmlFor="21212">
                <input id='21212' onChange={e => decodeFiles(e.target.files)} type="file" multiple={true} style={{display: 'none'}}/>
                Добавить
            </label>
            <div className={classes.viewFilesWrapper}>
                {
                    decodedFiles.map(decodedFile =>
                        <ViewFile
                            key={decodedFile.id}
                            name={decodedFile.name}
                            type={decodedFile.type}
                            size={decodedFile.size}
                            dataUrl={decodedFile.result}
                            onCloseHandle={() => removeFileHandler(decodedFile.id)}
                        />
                    )
                }
            </div>
        </div>

    )
}

const MultipleFileUpload = ({setUploadedFiles, uploadedFiles}) => {
    const [decodedFiles, setDecodedFiles] = useState([])
    const [isDrugOver, setIsDrugOver] = useState(false)

    const decodeFile = file => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader()
            reader.onload = e => {
                const decodedFile = {
                    id: file.id,
                    name: file.name,
                    type: file.name.split('.').pop(),
                    size: getReadableFileSizeString(file.size),
                    result: e.target.result
                }
                resolve(decodedFile)
            }
            reader.onerror = e => reject(e)
            reader.readAsDataURL(file)
        })
    }

    const decodeFiles = files => {
        console.log(files)
        files = Array.from(files).map(file => {
            file.id = uuid()
            return file
        })
        console.log(files)
        setUploadedFiles([...uploadedFiles, ...files])
        Promise.all(Array.from(files).map(file => {
            const fileType = file.type.split('/')[0]
            switch (fileType) {
                case 'image':
                    return decodeFile(file)
                default:
                    return {
                        id: file.id,
                        name: file.name,
                        type: file.name.split('.').pop(),
                        size: getReadableFileSizeString(file.size),
                        result: 'https://cdn.sstatic.net/Img/home/illo-public.svg?v=14bd5a506009'
                    }
            }
        }))
            .then((decodedFilesList) => {
                setDecodedFiles([...decodedFiles, ...decodedFilesList])
            })
    }

    const dropHandler = e => {
        e.preventDefault()
        const files = e.dataTransfer.files
        decodeFiles(files)
        setIsDrugOver(false)
    }

    const changeInputHandler = e => {
        const files = e.target.files
        decodeFiles(files)
    }

    useEffect(() => {
        document.addEventListener('dragover', e => {
            e.preventDefault()
            setIsDrugOver(true)
        })
        document.addEventListener('dragleave', e => {
            e.preventDefault()
            setIsDrugOver(false)
        })
        document.addEventListener('drop', e => {
            e.preventDefault()
            setIsDrugOver(false)
        })

    }, [])

    return (
        <div>
            {
                decodedFiles.length > 0 ?
                        isDrugOver ?
                            <FileUpload dropHandler={dropHandler} isDrugOver={isDrugOver} changeInputHandler={changeInputHandler} />
                        :
                            <ViewFiles
                                decodeFiles={decodeFiles}
                                uploadedFiles={uploadedFiles}
                                decodedFiles={decodedFiles}
                                setDecodedFiles={setDecodedFiles}
                                setUploadedFiles={setUploadedFiles}
                            />
                    :
                    <FileUpload dropHandler={dropHandler} isDrugOver={isDrugOver} changeInputHandler={changeInputHandler} />
            }
        </div>
    )
};

export default MultipleFileUpload;